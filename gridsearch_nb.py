# -*- coding: utf-8 -*-
"""gridsearch_NB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k2N4PjJIN7mSZXAaqXPcet-nrDJ4Sego
"""

import numpy as np
import pandas as pd
from sklearn.naive_bayes import BernoulliNB
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV

from google.colab import drive
drive.mount('/content/drive')

dataset = pd.read_csv("/content/drive/MyDrive/dataset_pre_processed.csv", dtype={"Class": int})
partA, partB = train_test_split(dataset, test_size=0.8)
y = partA["CLASS_LABEL"]
X = partA.drop("CLASS_LABEL", axis=1)

dataset = dataset[['NumDots', 'SubdomainLevel', 'PathLevel', 'UrlLength', 'NumDash',
       'NumNumericChars', 'PathLength', 'QueryLength', 'NumSensitiveWords',
       'EmbeddedBrandName', 'PctExtHyperlinks', 'PctExtResourceUrls',
       'InsecureForms', 'AbnormalFormAction', 'PctNullSelfRedirectHyperlinks',
       'FrequentDomainNameMismatch', 'SubmitInfoToEmail',
       'ExtMetaScriptLinkRT', 'PctExtNullSelfRedirectHyperlinksRT','CLASS_LABEL']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

param_grid = {
    'alpha': np.linspace(0.1, 1.0, 10),
    'binarize': [0.0, 0.5, 1.0],
    'fit_prior': [True, False]
}

nb = BernoulliNB()

grid_search = GridSearchCV(nb, param_grid, cv=5)

grid_search.fit(X_train, y_train)

print("Melhores parâmetros encontrados:")
print(grid_search.best_params_)

accuracy = grid_search.score(X_test, y_test)
print("Acurácia do modelo nos dados de teste:", accuracy)