# -*- coding: utf-8 -*-
"""gridsearch_tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJurB2e8Dd2g5RqUkxyzvkajcGAEarr0
"""

import numpy as np
import pandas as pd
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV

from google.colab import drive
drive.mount('/content/drive')

dataset = pd.read_csv("/content/drive/MyDrive/dataset_pre_processed.csv", dtype={"Class": int})
df = dataset[['NumDots', 'PathLevel', 'UrlLength', 'NumDash', 'NumDashInHostname',
       'AtSymbol', 'NumUnderscore', 'NumQueryComponents', 'NumAmpersand',
       'NumNumericChars', 'RandomString', 'DomainInPaths', 'HostnameLength',
       'PathLength', 'QueryLength', 'DoubleSlashInPath', 'NumSensitiveWords',
       'PctExtHyperlinks', 'PctExtResourceUrls', 'InsecureForms',
       'PctNullSelfRedirectHyperlinks', 'FrequentDomainNameMismatch',
       'PopUpWindow', 'SubmitInfoToEmail', 'IframeOrFrame', 'UrlLengthRT',
       'PctExtResourceUrlsRT', 'AbnormalExtFormActionR', 'ExtMetaScriptLinkRT',
       'PctExtNullSelfRedirectHyperlinksRT','CLASS_LABEL']]
partA, partB = train_test_split(df, test_size=0.8)
y = partA["CLASS_LABEL"]
X = partA.drop("CLASS_LABEL", axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

param_grid = {
    'criterion': ['gini', 'entropy', 'log_loss'],
    'splitter': ['best', 'random'],
    'max_depth': [np.arange(1,30,2), None],
    'min_samples_split': np.arange(1,10,1),
    'min_samples_leaf': np.arange(1,5,1)
}

tree = tree.DecisionTreeClassifier()

grid_search = GridSearchCV(tree, param_grid, cv=5)

grid_search.fit(X_train, y_train)

print("Melhores parâmetros encontrados:")
print(grid_search.best_params_)

accuracy = grid_search.score(X_test, y_test)
print("Acurácia do modelo nos dados de teste:", accuracy)