# -*- coding: utf-8 -*-
"""naive_bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rg84-1dSi9mAifrXO5n9o1PeXiq22XVl

Bibliotecas
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.naive_bayes import BernoulliNB
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

"""Importar dataset"""

df = pd.read_csv('/content/drive/MyDrive/dataset_pre_processed.csv', dtype={"CLASS_LABEL": int})
df.head()

df = df[['NumDots', 'SubdomainLevel', 'PathLevel', 'UrlLength', 'NumDash',
       'NumNumericChars', 'PathLength', 'QueryLength', 'NumSensitiveWords',
       'EmbeddedBrandName', 'PctExtHyperlinks', 'PctExtResourceUrls',
       'InsecureForms', 'AbnormalFormAction', 'PctNullSelfRedirectHyperlinks',
       'FrequentDomainNameMismatch', 'SubmitInfoToEmail',
       'ExtMetaScriptLinkRT', 'PctExtNullSelfRedirectHyperlinksRT','CLASS_LABEL']]

"""Dividir dados de treino e teste(A = 20%, B = 80%)"""

A,B = train_test_split(df, test_size=0.8)

"""Dividir entre classe e outras features"""

y = A["CLASS_LABEL"]
X = A.drop("CLASS_LABEL", axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

"""Bernoulli Nayve Bayes"""

clf = BernoulliNB(alpha= 0.2, binarize= 0.0, fit_prior= True)

score = cross_val_score(clf, X_train, y_train, scoring="accuracy").mean()
score

"""Validação

"""

y = B["CLASS_LABEL"]
X = B.drop("CLASS_LABEL",axis=1)

clf_pred = cross_val_predict(clf, X, y)
conf = confusion_matrix(y, clf_pred)

group_names = ['TN','FP','FN','TP']
group_counts = ['{0:0.0f}'.format(value) for value in
                conf.flatten()]
labels = [f'{v1}\n{v2}' for v1, v2 in
          zip(group_names,group_counts)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(conf, annot=labels, fmt='', cmap='Oranges')

print("Accuracy: ", accuracy_score(y, clf_pred) * 100)
print("Precision: ", precision_score(y, clf_pred) * 100)
print("Recall: ", recall_score(y, clf_pred) * 100)
print("F1-Score: ", f1_score(y, clf_pred) * 100)